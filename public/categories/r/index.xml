<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Maximuming At The Peak</title>
    <link>/categories/r/</link>
    <description>Recent content in R on Maximuming At The Peak</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Grouped Summary with tapply</title>
      <link>/2018/02/23/grouped-summary-with-tapply/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/02/23/grouped-summary-with-tapply/</guid>
      <description>COPY / PASTE HERE:   tapply( d.in\(metric, d.in\)group, summary)
 This is a quick one and sourced from this SO answer but I kept googling it so wanted to just put it up here.
I’ll often want to quickly view 5-stat summaries of a grouped dataframe. tapply isn’t really a purrr or dplyr approach so people might not think it is elegant but everything I’m googling for purrr or dplyr solutions to this problem statement are really verbose.</description>
    </item>
    
    <item>
      <title>Logarithmic Bucketing in R</title>
      <link>/2017/12/07/logarithmic-bucketing/</link>
      <pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/07/logarithmic-bucketing/</guid>
      <description>COPY / PASTE HERE:   c(0,10^(1:7))
  paste0(‘&amp;lt;=’,scales::comma(c(10^(1:7))))
 Some of the datasets I deal with are lognormally distributed. Basically what this means is they follow the 80/20 rule where 80% of the sum of the values comes from the top 20% of the observations when sorted descending. There are a lot of observations with very low values relative to the range. Often I bucket things into bins for reporting based on log base-10 rule where we bucket “observations less than 10”, then observations less than 100 then 1,000 then 10,000 etc.</description>
    </item>
    
    <item>
      <title>Plot Grouped Indexed Time-Series Changes</title>
      <link>/2017/12/05/indexed-time-series-changes/</link>
      <pubDate>Tue, 05 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/05/indexed-time-series-changes/</guid>
      <description>COPY / PASTE HERE:   mutate( index = value / value[1] - 1 )
 One thing I do at my job all. the. time is index time-series together in order to compare relative changes in a given time window. The problem statement is usually when I’m comparing the price changes of two assets with vastly different prices. So trying to plot something moving from $1MM to $1.1MM on the same plot as something moving from $10 to $11.</description>
    </item>
    
    <item>
      <title>The Train Schedule</title>
      <link>/2017/10/01/the-train-schedule/</link>
      <pubDate>Sun, 01 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/10/01/the-train-schedule/</guid>
      <description>This website needs content. I don’t really know what to write at the moment so I’m going to just start with a simple recreation of a famous old ( originally made 137 years ago) visualization to get things rolling. I could have chosen to write about Napoleon’s infamous march but plenty of people wrote about that already.
I recently purchased a copy of https://www.amazon.co.uk/Visual-Display-Quantitative-Information/dp/0961392142 by Edward Tufte. The cover image is a photo of E.</description>
    </item>
    
  </channel>
</rss>